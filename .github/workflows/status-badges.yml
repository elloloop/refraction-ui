name: Update Status Badges
on:
  workflow_run:
    workflows: ["CI", "Test Matrix", "Release"]
    types: [completed]
  schedule:
    # Update badges daily at 6 AM UTC
    - cron: "0 6 * * *"

jobs:
  update-badges:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Update README badges
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read current README
            const readmePath = path.join(process.cwd(), 'README.md');
            let readmeContent = fs.readFileSync(readmePath, 'utf8');

            // Get workflow status
            const { data: workflows } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 10
            });

            // Update CI badge
            const ciWorkflow = workflows.workflow_runs.find(w => w.name === 'CI');
            if (ciWorkflow) {
              const ciStatus = ciWorkflow.conclusion === 'success' ? 'passing' : 'failing';
              const ciBadge = `![CI](https://img.shields.io/github/actions/workflow/status/${context.repo.owner}/${context.repo.repo}/ci.yml?label=CI&color=${ciStatus === 'passing' ? 'green' : 'red'})`;
              
              readmeContent = readmeContent.replace(
                /!\[CI\]\(https:\/\/img\.shields\.io\/github\/actions\/workflow\/status\/[^)]+\)/g,
                ciBadge
              );
            }

            // Update test matrix badge
            const testWorkflow = workflows.workflow_runs.find(w => w.name === 'Test Matrix');
            if (testWorkflow) {
              const testStatus = testWorkflow.conclusion === 'success' ? 'passing' : 'failing';
              const testBadge = `![Tests](https://img.shields.io/github/actions/workflow/status/${context.repo.owner}/${context.repo.repo}/test-matrix.yml?label=Tests&color=${testStatus === 'passing' ? 'green' : 'red'})`;
              
              // Add test badge if it doesn't exist
              if (!readmeContent.includes('![Tests]')) {
                readmeContent = readmeContent.replace(
                  /!\[CI\]\([^)]+\)/,
                  `$&\n${testBadge}`
                );
              } else {
                readmeContent = readmeContent.replace(
                  /!\[Tests\]\(https:\/\/img\.shields\.io\/github\/actions\/workflow\/status\/[^)]+\)/g,
                  testBadge
                );
              }
            }

            // Write updated README
            fs.writeFileSync(readmePath, readmeContent);

            // Commit changes if modified
            const { data: status } = await github.rest.repos.getCombinedStatusForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'main'
            });

            if (status.state === 'success') {
              await github.rest.git.createCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                message: 'docs: update workflow status badges',
                tree: await github.rest.git.getTree({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tree_sha: context.sha
                }).then(res => res.data.sha),
                parents: [context.sha]
              });
            }
